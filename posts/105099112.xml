<item>
	<title>Personaliza el código creado por generadores de rails</title>
	<link>http://old.gemaroja.com/personaliza-el-codigo-creado-por-generadores</link>
	<pubDate>Sat Feb 25 12:25:00 -0800 2012</pubDate>
	
	<dc:creator><![CDATA[Felipe Espinoza]]></dc:creator>
	
	
		<category domain="tag" nicename="generators"><![CDATA[generators]]></category>
	
		<category domain="tag" nicename="rails"><![CDATA[rails]]></category>
	
		<category domain="tag" nicename="templates"><![CDATA[templates]]></category>
	

	<category><![CDATA[Uncategorized]]></category>

	<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

  <guid isPermaLink="false">http://old.gemaroja.com/personaliza-el-codigo-creado-por-generadores</guid>
	<description></description>
	<content:encoded><![CDATA[<p>Como mi primer post para Gema Roja, la idea es explicar como redefinir el c&oacute;digo que crean los generadores de rails.</p>
<p>Desde rails 3, los generadores son mucho m&aacute;s modulares, adem&aacute;s de ser definidos con la gema Thor y se pueden encadenar entre s&iacute;, como lo hace el generador de 'scaffold' el cual &uacute;nicamente llama a otros generadores.</p>
<p>Entonces, si te encuentras haciendo los mismos cambios cada vez que generas c&oacute;digo con los generadores de rails, tienes la opci&oacute;n de crear tu propio generador o cambiar los templates de c&oacute;digo que usan los generadores que vienen con rails.</p>
<p>Para eso, por ejemplo, si queremos cambiar el c&oacute;digo generado en un controlador por el generador scaffold, el template que usa rails est&aacute; en</p>
<p><strong><a href="https://github.com/rails/rails/blob/master/railties/lib/rails/generators/rails/scaffold_controller/templates/controller.rb"> rails/railties/lib/rails/generators/rails/scaffold_controller/templates/controller.rb</a></strong></p>
<p>por lo tanto, pueden tomar el contenido de ese archivo, modificarlo y guardarlo en</p>
<p><strong>projecto_rails/lib/templates/rails/scaffold_controller/controller.rb</strong></p>
<p>y cada vez que ejecuten rails g scaffold_controller controller_name o rails g scaffold model_name se usar&aacute; ese template.</p>
<p>Entonces, el patr&oacute;n comun es</p>
<p><span style="color: #800000;">projecto/**/generators</span><strong><span style="color: #800000;">/path/to/specific_generator/</span></strong><span style="color: #800000;">templates</span><strong><span style="color: #800000;">/template.extension</span></strong> yo creo en mi directorio <span style="color: #800000;">lib/templates</span><strong><span style="color: #800000;">/path/to/specific_generator/template.extension</span></strong> para sobre escribir estos templates.</p>
<p>como ejemplo extra, dejo las redefiniciones que hice para un projecto en el cual uso la gema haml-rails, para cambiar sus templates tambi&eacute;n lo que resulta aplicable para cualquier generador</p>
<p>de</p>
<div class="CodeRay">
  <div class="code"><pre>haml-rails/lib/generators/haml/scaffold/templates:
    _form.html.haml edit.html.haml  index.html.haml new.html.haml   show.html.haml</pre></div>
</div>

<p>a</p>
<div class="CodeRay">
  <div class="code"><pre>lib/templates/haml/scaffold
 _form.html.haml edit.html.haml  index.html.haml new.html.haml   show.html.haml</pre></div>
</div>

<p>finalmente dejo un ejemplo de como dej&eacute; el template para controllers generados por scaffold</p>
<p>&nbsp;</p>
<div class="CodeRay">
  <div class="code"><pre>&lt;% module_namespacing do -%&gt;
class &lt;%= controller_class_name %&gt;Controller &lt; ApplicationController
  respond_to :html
  
  def index
    @&lt;%= plural_table_name %&gt; = &lt;%= orm_class.all(class_name) %&gt;
  end

  def show
    @&lt;%= singular_table_name %&gt; = &lt;%= orm_class.find(class_name, &quot;params[:id]&quot;) %&gt;
  end

  def new
    @&lt;%= singular_table_name %&gt; = &lt;%= orm_class.build(class_name) %&gt;
  end

  def edit
    @&lt;%= singular_table_name %&gt; = &lt;%= orm_class.find(class_name, &quot;params[:id]&quot;) %&gt;
  end

  def create
    @&lt;%= singular_table_name %&gt; = &lt;%= orm_class.build(class_name, &quot;params[:#{singular_table_name}]&quot;) %&gt;
    if @&lt;%= orm_instance.save %&gt;
      redirect_to @&lt;%= singular_table_name %&gt;, &lt;%= key_value :notice, &quot;t('#{singular_table_name}.sucessfully_created')&quot; %&gt;
    else
      render &lt;%= key_value :action, '&quot;new&quot;' %&gt;
    end
  end

  def update
    @&lt;%= singular_table_name %&gt; = &lt;%= orm_class.find(class_name, &quot;params[:id]&quot;) %&gt;
    if @&lt;%= orm_instance.update_attributes(&quot;params[:#{singular_table_name}]&quot;) %&gt;
      redirect_to @&lt;%= singular_table_name %&gt;, &lt;%= key_value :notice, &quot;t('#{singular_table_name}.sucessfully_updated')&quot; %&gt;
    else
      render &lt;%= key_value :action, '&quot;edit&quot;' %&gt;
    end
  end

  def destroy
    @&lt;%= singular_table_name %&gt; = &lt;%= orm_class.find(class_name, &quot;params[:id]&quot;) %&gt;
    @&lt;%= orm_instance.destroy %&gt;
    redirect_to &lt;%= index_helper %&gt;_path, &lt;%= key_value :notice, &quot;t('#{singular_table_name}.sucessfully_destroyed')&quot; %&gt;
  end
end
&lt;% end -%&gt;</pre></div>
</div>]]></content:encoded>
	<excerpt:encoded><![CDATA[Como mi primer post para Gema Roja, la idea es explicar como redefinir el código que crean los generadores de rails. Desde rails 3, los generadores son mucho más modulares, además de ser definidos con la gema Thor y se pueden encadenar entre sí, c...]]></excerpt:encoded>	

	<wp:post_date>Sat Feb 25 12:25:00 -0800 2012</wp:post_date>
	<wp:post_date_gmt>Sat Feb 25 12:25:00 -0800 2012</wp:post_date_gmt>
	<wp:comment_status>open</wp:comment_status>
	<wp:ping_status>open</wp:ping_status>
	<wp:post_id>105099112</wp:post_id>
	<wp:post_name>personaliza-el-codigo-creado-por-generadores</wp:post_name>
	<wp:status>publish</wp:status>
	<wp:post_parent>0</wp:post_parent>
	<wp:menu_order>0</wp:menu_order>
	<wp:post_type>post</wp:post_type>
	<wp:post_password></wp:post_password>
	<wp:is_sticky>0</wp:is_sticky>

	
</item>
